/*******************************************************************************
344. Reverse String
设置双索引进行原地转换
通过begin++，end--来进行控制
*******双索引
*******************************************************************************/
string reverseString(string s){
    if(s.empty())
        return s;
    int begin = 0;
    int end = s.size()-1;
    while(begin<end){
        char tmp = s[begin];
        s[begin ++] = s[end];
        s[end --] = tmp;
    }
    return s;
}

/*******************************************************************************
例题：151 翻转字符串中单词，消除空格的影响

*******************************************************************************/
void reverseWords(string &s){
    istringstream is(s);
    string tem;
    is>>s;
    while(is >> tem){
        s = tem + " " + s;
    }
    if(!s.tempty() && s[0]==' ')
        s = "";
}
/*
字符串流类stringstream的解法，我们先把字符串装载入字符串流中，然后定义一个临时变量tmp，然后把第一个单词赋给s，
这里需要注意的是，如果含有非空格字符，那么每次>>操作就会提取连在一起的非空格字符，那么我们每次将其加在s前面即
可；如果原字符串为空，那么就不会进入while循环；如果原字符串为许多空格字符连在一起，那么第一个>>操作就会提取出
这些空格字符放入s中，然后不进入while循环，这时候我们只要判断一下s的首字符是否为空格字符，是的话就将s清空即可
*/
void reverseWords(string &s){
	istringstream is(s);
	is>>s;
	string tmp;
	while(is>>tmp){
		s = tmp +" "+ s;
	}
	if(!s.empty() && s[0] == ' ')
		s = "";

}
//方法二
void reverseWords(string &s) {
    int storeIndex = 0, n = s.size();
    reverse(s.begin(), s.end());
    for (int i = 0; i < n; ++i) {
        if (s[i] != ' ') {
            if (storeIndex != 0) s[storeIndex++] = ' ';
            int j = i;
            while (j < n && s[j] != ' ') s[storeIndex++] = s[j++];
            reverse(s.begin() + storeIndex - (j - i), s.begin() + storeIndex);
            i = j;
        }
    }
    s.resize(storeIndex);
}
/*******************************************************************************

*******************************************************************************/


/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/



/*******************************************************************************

*******************************************************************************/
